#!/bin/bash -e

[ -z "$__PROMPT_INDENT" ] && __PROMPT_INDENT='1'
[ -z "$__CD_LS"         ] && __CD_LS='1'
[ -z "$__EDITOR"        ] && __EDITOR='nano'
[ -z "$__XEDITOR"       ] && __XEDITOR='kwrite'
[ -z "$__XEDITOR2"      ] && __XEDITOR2='kate'

#
# .bashrc-phd
#
# Copyright (C) 2010-2024  Piotr Henryk Dabrowski <phd@phd.re>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program; if not, see
# <https://www.gnu.org/licenses/>.
#

# colors
C_NONE=$'\e[39m'
C_BLACK=$'\e[30m'
C_RED=$'\e[31m'
C_GREEN=$'\e[32m'
C_YELLOW=$'\e[33m'
C_BLUE=$'\e[34m'
C_MAGENTA=$'\e[35m'
C_CYAN=$'\e[36m'
C_LGRAY=$'\e[37m'
C_DGRAY=$'\e[90m'
C_LRED=$'\e[91m'
C_LGREEN=$'\e[92m'
C_LYELLOW=$'\e[93m'
C_LBLUE=$'\e[94m'
C_LMAGENTA=$'\e[95m'
C_LCYAN=$'\e[96m'
C_WHITE=$'\e[97m'
B_NONE=$'\e[49m'
B_BLACK=$'\e[40m'
B_RED=$'\e[41m'
B_GREEN=$'\e[42m'
B_YELLOW=$'\e[43m'
B_BLUE=$'\e[44m'
B_MAGENTA=$'\e[45m'
B_CYAN=$'\e[46m'
B_LGRAY=$'\e[47m'
B_DGRAY=$'\e[100m'
B_LRED=$'\e[101m'
B_LGREEN=$'\e[102m'
B_LYELLOW=$'\e[103m'
B_LBLUE=$'\e[104m'
B_LMAGENTA=$'\e[105m'
B_LCYAN=$'\e[106m'
B_WHITE=$'\e[107m'
BC_NONE="${B_NONE}${C_NONE}"
BC_RESET=$'\e[0m'
F_BOLD_ON=$'\e[1m'
F_BOLD_OFF=$'\e[21m'
F_DIM_ON=$'\e[2m'
F_DIM_OFF=$'\e[22m'
F_ITALIC_ON=$'\e[3m'
F_ITALIC_OFF=$'\e[23m'
F_UNDERLINE_ON=$'\e[4m'
F_UNDERLINE_OFF=$'\e[24m'
F_BLINKING_ON=$'\e[5m'
F_BLINKING_OFF=$'\e[25m'
F_REVERSE_ON=$'\e[7m'
F_REVERSE_OFF=$'\e[27m'
F_HIDDEN_ON=$'\e[8m'
F_HIDDEN_OFF=$'\e[28m'
F_STRIKETHROUGH_ON=$'\e[9m'
F_STRIKETHROUGH_OFF=$'\e[29m'
F_ALL_OFF="${F_BOLD_OFF}${F_DIM_OFF}${F_ITALIC_OFF}${F_UNDERLINE_OFF}${F_BLINKING_OFF}${F_REVERSE_OFF}${F_HIDDEN_OFF}${F_STRIKETHROUGH_OFF}"
F_RESET="${F_ALL_OFF}${BC_RESET}"
T_CURSOR_OFF=$'\e[?25l'
T_CURSOR_ON=$'\e[?25h'

__PHDCONF_PATH="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

export LS_COLORS="${LS_COLORS}:so=01;37;42:"
bind 'set show-all-if-ambiguous on'

export GREP_COLORS='ms=01;37;42'

function mkalias { alias -- "$1"="$2"; } # fallback
source "${__PHDCONF_PATH}/mkalias.sh" || true

function has_command {
    command -v "$@" &>/dev/null
}

function trim {
    local var="$@"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "${var}"
}

function decorate {
    local line
    while read line; do
        echo "${1}${line}${2}"
    done
}

__LAST_COMMAND=''
__LAST_DEBUG_COMMAND=''
__CURRENT_DEBUG_COMMAND=''
function __debug_last_command {
    __LAST_DEBUG_COMMAND="${__CURRENT_DEBUG_COMMAND}"
    __CURRENT_DEBUG_COMMAND="${BASH_COMMAND}"
    return 0
}
trap __debug_last_command DEBUG
function __store_last_command {
    __LAST_COMMAND="${__LAST_DEBUG_COMMAND}"
}
function __cleanup_last_command {
    __LAST_DEBUG_COMMAND=''
    __CURRENT_DEBUG_COMMAND=''
}
function __has_last_command {
    # echo "(LAST=${__LAST_COMMAND})" # debug
    [ -n "${__LAST_COMMAND}" ]
}

if [ -f /usr/lib/git-core/git-sh-prompt ]; then
    . /usr/lib/git-core/git-sh-prompt
fi

GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_SHOWUPSTREAM='auto'
GIT_PS1_SHOWCOLORHINTS='true'
GIT_PS1_STATESEPARATOR=''
if [ "$(id -u)" -eq 0 ]; then
    __prompt_sign='#'
    __prompt_fg="${C_RED}"
    __prompt_bg="${B_RED}"
else
    __prompt_sign='$'
    __prompt_fg="${C_BLUE}"
    __prompt_bg="${B_BLUE}"
fi

__prompt_flags=''
function __update_prompt_flags {
    __prompt_flags=''
    test -o history || \
        __prompt_flags="${__prompt_flags} ${C_MAGENTA}H-${C_NONE}"
    if [ "${HISTFILE}" = '/dev/null' ]; then
        __prompt_flags="${__prompt_flags} ${C_MAGENTA}h-${C_NONE}"
    fi
    if [ "${__IDLE}" = '1' ]; then
        __prompt_flags="${__prompt_flags} ${C_MAGENTA}idle${C_NONE}"
    fi
    if [ "${__NV_PRIME_RENDER_OFFLOAD}" = '1' ] && [ "${__GLX_VENDOR_LIBRARY_NAME}" = 'nvidia' ]; then
        __prompt_flags="${__prompt_flags} ${C_MAGENTA}nv${C_NONE}"
    fi
    if [ "${__GL_SYNC_TO_VBLANK}" = '1' ] && [ "${vblank_mode}" -ge '2' ]; then
        __prompt_flags="${__prompt_flags} ${C_MAGENTA}vsync+${C_NONE}"
    fi
    if [ "${__GL_SYNC_TO_VBLANK}" = '0' ] && [ "${vblank_mode}" = '0' ]; then
        __prompt_flags="${__prompt_flags} ${C_MAGENTA}vsync-${C_NONE}"
    fi
}

function colorpwd {
    echo "${PWD////${C_YELLOW}/${C_NONE}}"
}
function __colorpwd {
    echo '${PWD////${C_YELLOW}/${C_NONE}}'
}
function __prompt_err {
    local ERR="${PIPESTATUS[-1]}"
    __has_last_command || return 0
    [ "${ERR}" -ne 0 ] || return 0
    echo -ne " ${C_RED}(${ERR})${C_NONE}"
}
function __git_head {
    git rev-parse --short HEAD 2>/dev/null
}
function __prompt_git {
    command -v __git_ps1 &>/dev/null && echo -n '$(__git_ps1 " ${C_GREEN}{%s${C_GREEN},$(__git_head)}${C_NONE}")'
}
function __prompt_git_eval {
    eval "echo \"$(__prompt_git)\""
}
function __prompt_shlvl {
    [ "${SHLVL}" -ge 2 ] && echo -ne " ${C_MAGENTA}${SHLVL}${C_NONE}"
}
PS1="\[${F_RESET}\]\[${__prompt_bg}\]  \[${B_NONE}\] $(__colorpwd) \[${__prompt_fg}\][\u@\H]\[${C_NONE}\]$(__prompt_git)$(__prompt_shlvl)\${__prompt_flags}\$(__prompt_err)\n\[${__prompt_bg}\] \[${B_NONE}\]\[${__prompt_fg}\]${__prompt_sign}\[${C_NONE}\] "
PS2="\[${__prompt_bg}\] \[${B_NONE}\]\[${__prompt_fg}\]>\[${C_NONE}\] "

if [ "${__PROMPT_INDENT}" -eq '0' ]; then
    PS1="\[${F_RESET}\]${debian_chroot:+($debian_chroot)}\[${__prompt_fg}\]\u\[${C_NONE}\]@\H:\[${__prompt_fg}\]\w\[${C_NONE}\]${__prompt_sign} "
    PS2="> "
fi

__HISTFILE=~/.bash_history-phd
export HISTFILE=~/.bash_history
history -c
history -w
export HISTFILESIZE=32000
export HISTSIZE=32000
export HISTFILE="${__HISTFILE}"
export HISTFILESIZE=32000
export HISTSIZE=32000
export HISTCONTROL='ignoredups:erasedups:ignorespace'
touch "$HISTFILE"
shopt -s histappend
bind 'set revert-all-at-newline on'
function __history_cleaned {
    awk \
        '{ gsub(/^[ \t]+|[ \t]+$/, "", $0); lines[n++]=$0; seen[$0]++; } END { for (i=0; i<n; i++) { if (!(--seen[lines[i]])) { print(lines[i]); } } }' \
        "$HISTFILE"
}
function __history_clean {
    local entries
    read -d '' entries <<<"$(__history_cleaned)"
    cat <<<"${entries}" > "$HISTFILE"
}
function __history_append {
    history -a
    __history_clean
}
function __history_reload {
    history -c
    history -r
}
export PROMPT_COMMAND="__has_last_command && __history_append ${PROMPT_COMMAND:+;} ${PROMPT_COMMAND}"
alias h='history'                                          # print history
alias hh='__history_reload'                                # reload common history from all shells
alias hhh='e "$HISTFILE"'                                  # edit Bash history
alias HHH='E "$HISTFILE"'                                  # edit Bash history in X
alias Ehhh='E "$HISTFILE"'                                 # edit Bash history in X
alias h-='HISTFILE=/dev/null      ; __update_prompt_flags' # temporarily disable history saving for this shell
alias h+="HISTFILE='${__HISTFILE}'; __update_prompt_flags" # re-enable history saving for this shell
alias H-='set +o history          ; __update_prompt_flags' # temporarily disable history for this shell
alias H+='set -o history          ; __update_prompt_flags' # re-enable history for this shell

export PROMPT_COMMAND="setterm -cursor on ${PROMPT_COMMAND:+;} ${PROMPT_COMMAND}"

shopt -s autocd

function mkdircd {
    local name="$@"
    mkdir -p -- "${name}" && cd "${name}"
}
alias mdc='mkdircd'
alias mdcd='mkdircd'
alias mkdc='mkdircd'
alias mkdcd='mkdircd'
alias mkcd='mkdircd'
mkalias md  'mkdir'  mkdir
mkalias mkd 'mkdir'  mkdir
mkalias rd  'rmdir'  rmdir
mkalias rmF 'rm -rf' rm

mkalias ls   'LC_COLLATE=en_US.utf8 ls --color=auto --group-directories-first'       ls
mkalias ls1  'ls -1'                                                                 ls
mkalias lsa  'ls -a'                                                                 ls
mkalias lsa1 'ls -a -1'                                                              ls
mkalias l    'LC_COLLATE=en_US.utf8  ls --color=auto --group-directories-first -lvF' ls
mkalias ll   'LC_COLLATE=en_US.utf8 ls --color=auto --group-directories-first -lvFa' ls
mkalias ll.  'll -I "[^.]*"'                                                         ls
mkalias lll  'll.'                                                                   ls

alias cd..='cd ..'
alias cd-='cd - &>/dev/null'
alias ..='cd ..'
alias ....='cd ../..'
alias ......='cd ../../..'
alias ..2='cd ../..'
alias ..3='cd ../../..'
alias ..4='cd ../../../..'
alias ..5='cd ../../../../..'
alias ..6='cd ../../../../../..'
alias ..7='cd ../../../../../../..'
alias ..8='cd ../../../../../../../..'
alias ..9='cd ../../../../../../../../..'
alias ...='cd .'
alias ~='cd ~'
alias c~='cd ~'
alias cd~='cd ~'
alias -- -='cd -'
alias cdw='__run_with_witch cd'

mkalias s  'sudo su' sudo
mkalias sk 'sudo -k' sudo
mkalias sd 'sudo'    sudo

mkalias lessf 'less -n +F' less
mkalias lessg 'less -n +G' less

mkalias scr  'screen -D -R' screen
mkalias scrr 'screen -D -r' screen
mkalias scrl 'screen -list' screen
mkalias scrw 'screen -wipe' screen

alias exit='clear; exit'
alias logout='clear; logout'
alias q='clear; exit'

mkalias grep  'grep --color=auto' grep
mkalias grepE 'grep -E'           grep

mkalias sedn  'sed -E -e "1h;2,\$H;\$!d;g"' sed
mkalias sedne 'sedn -e'                     sed

mkalias m 'make' make

mkalias e   "${__EDITOR}"               "${__EDITOR}"
mkalias se  "sudo ${__EDITOR}"          "${__EDITOR}"
mkalias E   "x ${__XEDITOR}"            "${__XEDITOR}"
mkalias EE  "x ${__XEDITOR2}"           "${__XEDITOR2}"
mkalias K   'x kate'                    kate
mkalias KW  'x kwrite'                  kwrite
mkalias KD  'x kdevelop'                kdevelop
mkalias C   'x codium'                  codium
mkalias I   'x intellij-idea-community' intellij-idea-community
mkalias ew  '__run_with_witch  e'       "${__EDITOR}"
mkalias sew '__run_with_witch se'       "${__EDITOR}"
mkalias Ew  '__run_with_witch  E'       "${__XEDITOR}"
mkalias EEw '__run_with_witch EE'       "${__XEDITOR2}"
mkalias Kw  '__run_with_witch  K'       kate
mkalias KWw '__run_with_witch KW'       kwrite
mkalias KDw '__run_with_witch KD'       kdevelop
mkalias Cw  '__run_with_witch  C'       codium
mkalias Iw  '__run_with_witch  I'       intellij-idea-community

alias err='tee /dev/stderr'
alias out='tee /dev/tty'
alias t='tee /dev/tty'

mkalias dm  'sudo dmesg'    dmesg
mkalias dmw 'sudo dmesg -w' dmesg

mkalias psaux  'ps aux'  ps
mkalias psauf  'ps auf'  ps
mkalias psaufx 'ps aufx' ps

mkalias du0  'du -d 0'    du
mkalias du1  'du -d 1'    du
mkalias du2  'du -d 2'    du
mkalias du3  'du -d 3'    du
mkalias duh  'du -h'      du
mkalias duh0 'du -h -d 0' du
mkalias duh1 'du -h -d 1' du
mkalias duh2 'du -h -d 2' du
mkalias duh3 'du -h -d 3' du

mkalias dfh 'df -h' df

mkalias unamea 'uname -a' uname

mkalias wh 'which' which

mkalias xargsn   'xargs     -d "\n" -r'    xargs
mkalias xargs1   'xargs -n1         -r'    xargs
mkalias xargsn1  'xargs -n1 -d "\n" -r'    xargs
mkalias xargsi   'xargs             -r -i' xargs
mkalias xargsi1  'xargs -n1 | xargs -r -i' xargs
mkalias xargsnb  'xargsn  bash -c'         bash
mkalias xargs1b  'xargs1  bash -c'         bash
mkalias xargsn1b 'xargsn1 bash -c'         bash
mkalias xargsib  'xargsi  bash -c'         bash
mkalias xargsi1b 'xargsi1 bash -c'         bash

alias reboot?='[ -f /var/run/reboot-required ] && echo YES || echo no'
alias reboot!='sudo reboot'
alias reboot?!='[ -f /var/run/reboot-required ] && (echo YES; sudo reboot || true) || echo no'

alias u+r='chmod u+r'
alias u-r='chmod u-r'
alias u+w='chmod u+w'
alias u-w='chmod u-w'
alias u+x='chmod u+x'
alias u-x='chmod u-x'
alias u+rw='chmod u+rw'
alias u-rw='chmod u-rw'
alias u+rx='chmod u+rx'
alias u-rx='chmod u-rx'
alias u+wx='chmod u+wx'
alias u-wx='chmod u-wx'
alias u+rwx='chmod u+rwx'
alias u-rwx='chmod u-rwx'
alias g+r='chmod g+r'
alias g-r='chmod g-r'
alias g+w='chmod g+w'
alias g-w='chmod g-w'
alias g+x='chmod g+x'
alias g-x='chmod g-x'
alias g+rw='chmod g+rw'
alias g-rw='chmod g-rw'
alias g+rx='chmod g+rx'
alias g-rx='chmod g-rx'
alias g+wx='chmod g+wx'
alias g-wx='chmod g-wx'
alias g+rwx='chmod g+rwx'
alias g-rwx='chmod g-rwx'
alias o+r='chmod o+r'
alias o-r='chmod o-r'
alias o+w='chmod o+w'
alias o-w='chmod o-w'
alias o+x='chmod o+x'
alias o-x='chmod o-x'
alias o+rw='chmod o+rw'
alias o-rw='chmod o-rw'
alias o+rx='chmod o+rx'
alias o-rx='chmod o-rx'
alias o+wx='chmod o+wx'
alias o-wx='chmod o-wx'
alias o+rwx='chmod o+rwx'
alias o-rwx='chmod o-rwx'
alias a+r='chmod a+r'
alias a-r='chmod a-r'
alias a+w='chmod a+w'
alias a-w='chmod a-w'
alias a+x='chmod a+x'
alias a-x='chmod a-x'
alias a+rw='chmod a+rw'
alias a-rw='chmod a-rw'
alias a+rx='chmod a+rx'
alias a-rx='chmod a-rx'
alias a+wx='chmod a+wx'
alias a-wx='chmod a-wx'
alias a+rwx='chmod a+rwx'
alias a-rwx='chmod a-rwx'

mkalias top 'top -d 0,5' top

mkalias git    'LANG=en_US.UTF-8 git' git
mkalias g      'git'                  git
mkalias gitgui 'x git gui'            git
mkalias gg     'gitgui'               git
mkalias gk     'gitk'                 gitk
mkalias k      'gitk'                 gitk
mkalias ka     'gitk --all'           gitk
mkalias qg     'qgit'                 qgit
mkalias gq     'qgit'                 qgit
mkalias gitq   'qgit'                 qgit

alias lsb-release='cat /etc/lsb-release'

alias ap-u='sudo apt-get update; sudo -k'
alias apu='ap-u'

alias apt-list-installed='LANG=C sudo apt list --installed 2>/dev/null | grep --color=never "/"'
alias apt-list-installed-local='LANG=C sudo apt list --installed 2>/dev/null | grep --color=never "/now "'
alias ap-li='apt-list-installed'
alias ap-lil='apt-list-installed-local'

alias dirty='watch -n1 -t grep -e "Dirty:" -e "Writeback:" /proc/meminfo'

mkalias fu 'flatpak update' flatpak
mkalias fl 'flatpak list'   flatpak

mkalias demangle 'c++filt' c++filt

alias bashtrack='strace -e execve -b execve -f -qqv -e signal="!all" bash'
mkalias axel   'axel --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0"' axel
mkalias axel2  'axel -n 2'                                                                                            axel
mkalias axel3  'axel -n 3'                                                                                            axel
mkalias axel4  'axel -n 4'                                                                                            axel
mkalias axel5  'axel -n 5'                                                                                            axel
mkalias axel10 'axel -n 10'                                                                                           axel
mkalias axel15 'axel -n 15'                                                                                           axel
mkalias axel20 'axel -n 20'                                                                                           axel
mkalias axel25 'axel -n 25'                                                                                           axel
mkalias axel30 'axel -n 30'                                                                                           axel

# which colormake &>/dev/null && alias make='colormake'

function __run_with_witch {
    local task="${@:1:$#-1}" # all args but last
    local which="${@: -1}" # last arg
    eval "${task} $(which ${which})"
}

function cd {
    local args=''
    while [[ "$1" = '-'?* ]]; do
        if [ "$1" = '--' ]; then
            shift
            break
        fi
        args+=" $1"
        shift
    done
    local where="$@"
    if [ -z "${where}" ]; then
        where="${HOME}"
    elif [ -e "${where}" ] && [ ! -d "${where}" ]; then
        where="$(dirname "${where}")"
        echo "cd -- '${where}'"
    fi
    builtin cd $args -- "${where}" || return "${?}"
    # skip for Konsole KPart:
    [ -n "${KONSOLE_VERSION}" ] && [ "${WINDOWID}" = '0' ] && return '0'
    [ ! "${__CD_LS}" -eq '1' ] && return '0'
    if [ "${__PROMPT_INDENT}" -eq '1' ]; then
        echo "${B_GREEN}  ${B_NONE} $(colorpwd)$(__prompt_git_eval)"
        LC_COLLATE='en_US.utf8' COLUMNS="$((${COLUMNS}-3))" ls --group-directories-first -C --color=always | sed -e "s,^,${B_GREEN} ${B_NONE}  ,"
    else
        echo "=== $(pwd) ==="
        LC_COLLATE='en_US.utf8' COLUMNS="$((${COLUMNS}-3))" ls --group-directories-first -C --color=always
    fi
}

function c {
    local args="$@"
    args="${args%/}"
    local matches=$(find . -maxdepth 1 -mindepth 1 -type d -name "*${args}*" -printf "%P\n" | sort)
    if [ -z "${matches}" ] || [ $(wc -l <<< "${matches}") -gt '1' ]; then
        echo "${matches}" | ( [ -n "${args}" ] && GREP_COLORS='ms=01;37;42' grep --color=always "${args}" || cat ) | decorate '' '/'
        return 1
    fi
    echo "cd -- '${matches}'"
    cd -- "${matches}"
}

function CD {
    builtin cd "$@"
}

function . {
    [ -z "$@" ] && cd . || source "$@"
}

function C! {
    command ${@}
}

function b {
    (
        exec &>/dev/null
        ${@} & disown
    )
}

function x {
    local args="$@"
    local input="$([ ! -t 0 ] && cat)"
    (
        (
            local output=$(xargs ${args} <<<"${input}" 2>&1)
            local ret="$?"
            case "${ret}" in
                '1'|'126'|'127')
                    >&2 echo "$output"
                    ;;
            esac
        ) &
        disown
    )
}

function idle {
    local child=''
    case "$@" in
        ''|*[!0-9]*)
        local command="${@:-bash}"
            __IDLE=1 $command &
            child="$!"
            ;;
    esac
    renice    -n 19    "${child:-$@}" &>/dev/null
    chrt   -p -i  0    "${child:-$@}" &>/dev/null
    ionice    -c  3 -p "${child:-$@}" &>/dev/null
    [ -n "${child}" ] && fg &>/dev/null
}
complete -F _command idle

function F {
    find . -not -path '*/.*' -name "$@"
}

function F. {
    find . -name "$@"
}

function G {
    grep -r --exclude-dir='.?*' --color=auto  -F    "$@" .
}
function GE {
    grep -r --exclude-dir='.?*' --color=auto  -E    "$@" .
}
function Gl {
    grep -r --exclude-dir='.?*' --color=never -F -l "$@" .
}
function GEl {
    grep -r --exclude-dir='.?*' --color=never -E -l "$@" .
}
function G. {
    grep -r --color=auto  -F    "$@" .
}
function GE. {
    grep -r --color=auto  -E    "$@" .
}
function Gl. {
    grep -r --color=never -F -l "$@" .
}
function GEl. {
    grep -r --color=never -E -l "$@" .
}

function S {
    (
        echo 'Syncing...'
        set +m
        sync &
        tput sc
        while true; do
            sleep 0.1
            tput rc
            grep --color=none -e 'Dirty:' -e 'Writeback:' /proc/meminfo
            pgrep -P $BASHPID &>/dev/null || break
            sleep 0.4
        done
        echo 'Done.'
    )
}

function wgetr {
    wget --referer=${1:-} ${1:-}
}

function slowcat {
    perl -pe "system 'sleep ${2:-.020}'" ${1:-}
}

function kernels {
    echo "KERNELS:"
    (builtin cd /boot; ls -1 vmlinu*-* | sort -V | decorate '     - ')
    echo "CURRENT: $(uname -sr)"
}

function __ap-up {
    local args="$@"
    apt-get update
    apt-get dist-upgrade
    kernels
    apt-get --purge autoremove || return $?
    apt-get clean || return $?
}
function ap-up {
    local args="$@"
    sudo bash -i -c "__ap-up" || return $?
    sudo -k
    echo -n 'Reboot: '; reboot?
}
alias apup='ap-up'

function __ap {
    local args="$@"
    aptitude ${args} || return $?
    kernels
    apt-get --purge autoremove || return $?
    apt-get clean || return $?
}
function ap {
    local args="$@"
    sudo bash -i -c "__ap ${args}" || return $?
    sudo -k
    echo -n 'Reboot: '; reboot?
}
alias ap-fo='ap -o Dpkg::Options::="--force-overwrite"'

function ap-fix {
    sudo bash -c "dpkg --configure -a; apt-get update --fix-missing; apt-get install -f; apt-get clean"
}
function ap! {
    ap-fix
    ap
}

function ap-key {
    while [ -n "$1" ]; do
        sudo wget "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x$1" -O "/etc/apt/trusted.gpg.d/$1.asc" --no-verbose
        shift
    done
}

function gitk {
    git status; x gitk $@
}

function ssha {
    eval `ssh-agent`
    ssh-add ~/.ssh/*.pem ~/.ssh/*_rsa
}
alias sshal='ssh-add -l'
alias sshak='eval `ssh-agent -k`'

function ssh-server-keys {
    ssh-keyscan ${1:-localhost} 2>/dev/null | ssh-keygen -lf - | column -t
}

function copy {
    cat "$@" | xclip -sel c
}

function cb {
    local args="$@"
    if [ -n "${args}" ]; then
        xclip -sel c <<< "${args}"
    elif [ ! -t 0 ]; then
        xclip -sel c
    else
        xclip -sel c -o 2>/dev/null || true
    fi
}
function CB {
    local args="$@"
    if [ -n "${args}" ]; then
        xclip -sel c <<< "${args}"
    elif [ ! -t 0 ]; then
        xclip -sel c
    fi
    xclip -sel c -o 2>/dev/null || true
}

function kman {
    x konqueror "man:/$@"
}

function mpv {
    /usr/bin/mpv "$@"
    local err="$?"
    if [ "${err}" -ne '0' ]; then
        kdialog --title 'MPV' --error "Running MPV failed."
    fi
    return "${err}"
}

function topcpu {
    echo `ps x -o pid=,pcpu=,comm= --sort -pcpu | head -n 1`
}

function topmem {
    echo `ps x -o pid=,rss=,comm= --sort -rss | head -n 1`
}

function wgets {
    local k=1
    local numbered=0
    if [ "$1" = '-n' ]; then
        numbered=1
        shift
    fi
    local url
    while read url; do
        url=$(trim "${url}")
        [ -z "${url}" ] && continue
        local name="$(basename "${url}")"
        local kstr=''
        if [ "${numbered}" = 1 ]; then
            kstr="${k} - "
        fi
        local kname="${kstr}${name}"
        wget                                                                       \
             --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 0 \
             --retry-on-http-error=503,429                                         \
             -c --referer "${url}" "${url}" -O "${kname}"                          \
             || true
        ((k++)) || true
    done < <(echo $@ | tr ' ' '\n'; cat)
}
alias wgetsn='wgets -n'

function nv {
    local args="$@"
    __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia ${args:-bash}
}
complete -F _command nv
function nvcomp+ {
    nvidia-settings --assign CurrentMetaMode='nvidia-auto-select +0+0 { ForceCompositionPipeline = On }'
}
function nvcomp- {
    nvidia-settings --assign CurrentMetaMode='nvidia-auto-select +0+0 { ForceCompositionPipeline = Off }'
}
function vsync+ {
    local args="$@"
    __GL_SYNC_TO_VBLANK=1 vblank_mode=3 ${args:-bash}
}
complete -F _command vsync+
function vsync- {
    local args="$@"
    __GL_SYNC_TO_VBLANK=0 vblank_mode=0 ${args:-bash}
}
complete -F _command vsync-

function server-http {
    python -m http.server "$@"
}

function server-http-php {
    local port="${1:-8000}"
    shift
    php -S "0.0.0.0:${port}" "$@"
}

function find-case-duplicated-files {
    find . | tr 'A-Z' 'a-z' | sort | uniq -D | sort -u
}

function cp2tree {
    to="${@: -1}"
    [ -z "${to}" ] && return 1
    while [ "$#" -ge 2 ]; do
        from="${1}"
        shift
        as="${to}/${from}"
        echo "${as}"
        if [ -d "${from}" ]; then
            mkdir -p "${as}"
        else
            path=$(dirname "${as}")
            mkdir -p "${path}"
            cp -a "${from}" "${as}"
        fi
    done
}

function cptree {
    local to="${1}"
    shift
    local args="$@"
    [ -z "${to}" ] && return 1
    find . ${args} | while read from; do cp2tree "${from}" "${to}"; done
}

function port-export { # $1=source-port $2=target-port $3=remote-ssh-server
    while true; do ssh -NR $2:localhost:$1 $3 -o TCPKeepAlive=yes -o ExitOnForwardFailure=yes; sleep 5; done
}
alias port-export-ssh='port-export 22'
alias port-export-http='port-export 80'
function port-import { # $1=source-port $2=target-port $3=remote-ssh-server
    while true; do ssh -NL $2:localhost:$1 $3 -o TCPKeepAlive=yes -o ExitOnForwardFailure=yes; sleep 5; done
}
alias port-import-ssh='port-import 22'
alias port-import-http='port-import 80'
function port-duplicate { # $1=source-port $2=target-port
    socat TCP-LISTEN:$2,fork TCP:localhost:$1
}

function wine-remove-extensions {
    rm -f ~/.local/share/mime/packages/x-wine*
    rm -f ~/.local/share/applications/wine-extension*
    rm -f ~/.local/share/icons/hicolor/*/*/application-x-wine-extension*
    rm -f ~/.local/share/mime/application/x-wine-extension*
}

function whatismyip {
    while true; do
        dig @resolver4.opendns.com myip.opendns.com +short             \
            | grep -E --color=never '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' \
            && break || true
        sleep 1
    done
}

function ovh-dyndns {
    local HOST="${1:-${HOSTNAME}}"
    read -e -p 'Hostname: ' -i "${HOST}" HOST
    local SUB="${HOST%.*.*}"
    local DOMAIN="${HOST:${#SUB}+1}"
    local USER="${DOMAIN}-${SUB}"
    read -e -p 'Username: ' -i "${USER}" USER
    local IP="${2:-$(whatismyip)}"
    read -e -p 'IP: ' -i "${IP}" IP
    local REPLY=$(LANG=C wget                                                      \
        --quiet                                                                    \
        --ask-password                                                             \
        --user "${USER}"                                                           \
        "https://www.ovh.com/nic/update?system=dyndns&hostname=${HOST}&myip=${IP}" \
        -O- || echo 'Error.')
    echo "$REPLY"
}

if [ -f ~/.bashrc-ssh ]; then
    . ~/.bashrc-ssh
fi

__update_prompt_flags

# must be at the end of the .bashrc file:
export PROMPT_COMMAND="__store_last_command; ${PROMPT_COMMAND} ${PROMPT_COMMAND:+;} __cleanup_last_command"
__cleanup_last_command
